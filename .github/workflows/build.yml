name: Build

on:
  push:
    branches: ['master']
  pull_request:
    branches: ['master']

jobs:
  test-3x:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install node
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: 'x64'

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Setup yarn cache
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        env:
          # Increase this value to reset cache
          CACHE_NUMBER: 0
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            **/node_modules
          key: ${{ runner.os }}-yarn-${{ env.CACHE_NUMBER }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ env.CACHE_NUMBER }}
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: python -m pip install -U jupyter_packaging~=0.7.9 jupyterlab~=3.0 pip wheel build
      - name: Test the extension
        run: |
          jlpm
          jlpm run eslint:check
          python -m pip install -e .[tests]

          # Python formatting checks
          black . --check

          # Run the Python tests
          pytest jupyterlab_git -r ap
          # Run the TS/JS tests
          jlpm run test

          python -m pip uninstall -y jupyterlab-git

          # Integration test
          python -m pip install .
          jupyter server extension list 2>&1 | grep -ie "jupyterlab_git.*OK"

          jupyter labextension list 2>&1 | grep -ie "@jupyterlab/git.*OK"
          python -m jupyterlab.browser_check

          python -m build -w

      - uses: actions/upload-artifact@v2
        if: matrix.python-version == '3.9'
        with:
          name: extension
          path: dist/jupyterlab_git*.whl
          if-no-files-found: error

  ui-test:
    name: Integration tests
    runs-on: ubuntu-latest

    needs: test-3x

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install node
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - uses: actions/download-artifact@v2
        with:
          name: extension
      - name: Setup Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
          architecture: 'x64'

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-3.9-${{ hashFiles('**/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-3.9-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        # Install jupyter-archive to deal with test git repository upload
        run: |
          python -m pip install -U pip
          python -m pip install jupyterlab~=3.0 jupyter-archive ./jupyterlab_git*.whl

      - name: Set up git
        run: |
          git config --global user.name 'Test Bot'
          git config --global user.email 'test-bot@example.com'

      - name: Start server for UI tests
        working-directory: ui-tests
        run: |
          jlpm
          (jupyter lab --config jupyter_server_test_config.py > /tmp/jupyterlab_server.log 2>&1) &
          jlpm run playwright install chromium

      - name: Wait for JupyterLab
        uses: ifaxity/wait-on-action@v1
        with:
          resource: http-get://localhost:8888/lab
          timeout: 180000

      - name: UI tests
        working-directory: ui-tests
        run: |
          jlpm run playwright test

      - name: Upload UI Test artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ui-test-output
          path: |
            ui-tests/playwright-report
            ui-tests/test-results

      - name: Stop JupyterLab
        if: always()
        run: |
          kill -s SIGTERM $(pgrep jupyter-lab)

      - name: Print JupyterLab logs
        if: always()
        run: |
          cat /tmp/jupyterlab_server.log
